# -*- coding: utf-8 -*-
"""
Created on Fri Aug 12 11:12:11 2016

@author: efron
"""

"""The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?"""

from primes import sieve_primes_under, count_divisors, product
from primes import unique_factorization as factor

# we note that if n has unique prime factorization (p1**a1, p2**a2...)
# then the number of divisors of n are product(ai+i)
# further, the triangular numbers have generating function f(n) = n(n+1)/2

# the solution is 

primes = sieve_primes_under(2*10**6)
def find_first_triangular_with_k_divisors(k = 500):
    maxDivisors = 0
    i = 2
    while True:
        i += i
        if i % 2 == 0:
            a, b = i//2, i+1
        else:
            a, b = i, (i+1) // 2
        factors = factor(a, primes= primes) + factor(b, primes = primes)
        divisorCount = product(factors[prime]+1 for prime in factors)
        if divisorCount>maxDivisors:
            maxDivisors = divisorCount
            print(a*b, '|', divisorCount)
        if divisorCount > k:
            print('triangular number # {0}:'.format(i))
            print(a*b)
            print('has {0} divisors'.format(divisorCount))
            return (a*b, divisorCount)

find_first_triangular_with_k_divisors()